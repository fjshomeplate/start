# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import speechly_pb2 as speechly__pb2


class SLUStub(object):
  """Speechly spoken language understanding service

  This service requires that the user has an accesstoken from
  `Identity` service. The token must be included in the metadata as
  `Authorization` key with value `Bearer TOKEN_HERE`.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Stream = channel.stream_stream(
        '/v1.SLU/Stream',
        request_serializer=speechly__pb2.SLURequest.SerializeToString,
        response_deserializer=speechly__pb2.SLUResponse.FromString,
        )


class SLUServicer(object):
  """Speechly spoken language understanding service

  This service requires that the user has an accesstoken from
  `Identity` service. The token must be included in the metadata as
  `Authorization` key with value `Bearer TOKEN_HERE`.
  """

  def Stream(self, request_iterator, context):
    """Starts an SLU bidirectional stream, the input and output
    messages explains the details of the call.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SLUServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Stream': grpc.stream_stream_rpc_method_handler(
          servicer.Stream,
          request_deserializer=speechly__pb2.SLURequest.FromString,
          response_serializer=speechly__pb2.SLUResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'v1.SLU', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class WLUStub(object):
  """Speechly written language understanding service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Text = channel.unary_unary(
        '/v1.WLU/Text',
        request_serializer=speechly__pb2.WLURequest.SerializeToString,
        response_deserializer=speechly__pb2.WLUResponse.FromString,
        )


class WLUServicer(object):
  """Speechly written language understanding service
  """

  def Text(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WLUServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Text': grpc.unary_unary_rpc_method_handler(
          servicer.Text,
          request_deserializer=speechly__pb2.WLURequest.FromString,
          response_serializer=speechly__pb2.WLUResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'v1.WLU', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class IdentityStub(object):
  """Authentication and identity service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Login = channel.unary_unary(
        '/v1.Identity/Login',
        request_serializer=speechly__pb2.LoginRequest.SerializeToString,
        response_deserializer=speechly__pb2.LoginResponse.FromString,
        )


class IdentityServicer(object):
  """Authentication and identity service
  """

  def Login(self, request, context):
    """Performs a login for the user, when successful it returns an
    access token to access `Slu` service.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IdentityServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Login': grpc.unary_unary_rpc_method_handler(
          servicer.Login,
          request_deserializer=speechly__pb2.LoginRequest.FromString,
          response_serializer=speechly__pb2.LoginResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'v1.Identity', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
